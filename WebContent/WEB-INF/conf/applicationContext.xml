<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-3.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
    
    <!-- 扫描service -->
    <context:component-scan base-package="nicky.service" />
    
    <!-- 引入jdbc配置文件 -->  
    <context:property-placeholder location="/WEB-INF/jdbc.properties" />

    <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true" />
    <!--创建jdbc数据源 --> 
    <bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
       <property name="targetDataSource">
            <ref local="mainDataSource" />
        </property>
    </bean>
    
    <!-- BoneCP configuration -->
    <bean id="mainDataSource" class="com.jolbox.bonecp.BoneCPDataSource"
        destroy-method="close">
        <property name="driverClass" value="${datasource.driverClassName}" />
        <property name="jdbcUrl" value="${datasource.url}" />
        <property name="username" value="${datasource.username}" />
        <property name="password" value="${datasource.password}" />
        <!--检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0-->
        <property name="idleConnectionTestPeriodInMinutes" value="10" />
        <!--连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0-->
        <property name="idleMaxAgeInMinutes" value="20" />
        <!--每个分区最大的连接数 -->
        <property name="maxConnectionsPerPartition" value="20" />
        <!--每个分区最小的连接数 -->
        <property name="minConnectionsPerPartition" value="1" />
        <!--分区数，默认值2，最小1，推荐3-4，视应用而定  -->
        <property name="partitionCount" value="2" />
        <!-- 当连接池中的连接耗尽的时候一次同时获取的连接数。Default: 1 -->
        <property name="acquireIncrement" value="5" />
        <!--缓存prepared statements的大小，默认值：0 -->
        <property name="statementsCacheSize" value="50" />
        <!--每个分区释放链接助理进程的数量，默认值：3 -->
        <property name="releaseHelperThreads" value="3" />
    </bean>
    
    <!-- define the SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="nicky.dao.entity" />
        <property name="configLocation" value="/WEB-INF/conf/mybatis.xml"/>
    </bean>
    
    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="nicky.dao.mapper" />
        <!-- <property name="markerInterface" value="com.pps.mapper.SqlMapper"/> -->
    </bean>

    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
        <qualifier value = "tran" />
    </bean>
    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    <!-- multipart resolver -->
    <bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
</beans>